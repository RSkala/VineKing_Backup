<?php

// Contains array of projects we need to generate.
$g_config_projects = array();

function generateConfigDirectories()
{
   // Depending on what project we want to generate, let's generate a list of files.
   $g_directories = array();

   $g_directories[] = 'audio';
   $g_directories[] = 'component';
   $g_directories[] = 'component/behaviors';
   $g_directories[] = 'console';      
   $g_directories[] = 'core';
   $g_directories[] = 'core/zip';
   $g_directories[] = 'core/zip/unitTests';
   $g_directories[] = 'core/zip/compressors';
   $g_directories[] = 'dgl';
   $g_directories[] = 'gui/buttons';
   $g_directories[] = 'gui/containers';
   $g_directories[] = 'gui/controls';
   $g_directories[] = 'gui/core';
   $g_directories[] = 'gui/editor';
   $g_directories[] = 'gui/game';
   $g_directories[] = 'gui/shiny';
   $g_directories[] = 'gui/utility';
   $g_directories[] = 'gui';
   $g_directories[] = 'game';
   $g_directories[] = 'game/net';
   $g_directories[] = 'i18n';
   $g_directories[] = 'math';
   $g_directories[] = 'platform';
   $g_directories[] = 'platform/nativeDialogs';
   $g_directories[] = 'platform/threads';
   $g_directories[] = 'platform/menus';

   $g_directories[] = 'platformWin32';
   $g_directories[] = 'platformWin32/menus';
   $g_directories[] = 'platformWin32/nativeDialogs';
   $g_directories[] = 'platformWin32/threads';
   $g_directories[] = 'platformWin32/registry';
   
   $g_directories[] = 'platformMacCarb';
   $g_directories[] = 'platformMacCarb/menus';
   
   $g_directories[] = 'platformX86UNIX';
   
   $g_directories[] = 'persistence';
   $g_directories[] = 'sim';
   $g_directories[] = 'util';
   $g_directories[] = 'util/messaging';
   $g_directories[] = 'unit/tests';
   $g_directories[] = 'unit';
   $g_directories[] = 'ts';

   $g_directories[] = 'TGB';
   $g_directories[] = 'T2D';
   $g_directories[] = 'T2D/activeTiles';
   $g_directories[] = 'T2D/aStar';

   // Alpha-sort it, for sanity.
   sort($g_directories);
   
   return $g_directories;
}

function generateConfigOutputs($name)
{
   return array(
      'build' => array(
         // Set the output directory for this project file. (Relative to projectGenerator's PWD)
         'outputDir' => './manifest',

         // Set the base directory for this project's code. (Relative to project output directory.)
         'baseDir' => '../../../engine/source/',

         // What project template are we using?
         'template' => 'buildManifest.tpl',

         // Filename to write the project to...
         'outputFile' => 'buildManifest_' . $name . '.txt',

         // What extensions are we scanning for?
         'fileExtensions' => array('cc', 'h', 'cpp', 'asm', 'mm', 'icns', 'y', 'l', 'bat'),
         
         // Rejection patterns.
         'rejectPatterns' => array(),
      ),
   );
}

// Information for the T2D project.
$g_config_projects['SourceTree'] = array(
      // What directories are we checking in?
      'paths' => generateConfigDirectories(),
      
      // List of outputs we want to generate.
      'outputs' => generateConfigOutputs("SourceTree"),
      
      'gameDir' => "games",
      
      'defines' => array(),
   );

?>
