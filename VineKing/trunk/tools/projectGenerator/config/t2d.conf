<?php

// Contains array of projects we need to generate.
$g_config_projects = array();

function generateConfigDirectories($isGame, $platform)
{
   // Depending on what project we want to generate, let's generate a list of files.
   $g_directories = array();

   // Core directories
   if(true)
   {
      $g_directories[] = 'audio';
      $g_directories[] = 'component';
      $g_directories[] = 'component/behaviors';
      $g_directories[] = 'console';      
      $g_directories[] = 'core';
      $g_directories[] = 'core/zip';
      $g_directories[] = 'core/zip/unitTests';
      $g_directories[] = 'core/zip/compressors';
      $g_directories[] = 'dgl';
      $g_directories[] = 'gui/buttons';
      $g_directories[] = 'gui/containers';
      $g_directories[] = 'gui/controls';
      $g_directories[] = 'gui/core';
      $g_directories[] = 'gui/editor';
      $g_directories[] = 'gui/game';
      $g_directories[] = 'gui/shiny';
      $g_directories[] = 'gui/utility';
      $g_directories[] = 'gui';
      $g_directories[] = 'game';
      $g_directories[] = 'game/net';
      $g_directories[] = 'i18n';
      $g_directories[] = 'math';
      $g_directories[] = 'platform';
      $g_directories[] = 'platform/nativeDialogs';
      $g_directories[] = 'platform/threads';
      $g_directories[] = 'platform/menus';
      
      // Platform layer
      switch( $platform )
      {
         case "windows":
               $g_directories[] = 'platformWin32';
               $g_directories[] = 'platformWin32/menus';
               $g_directories[] = 'platformWin32/nativeDialogs';
               $g_directories[] = 'platformWin32/threads';
               break;
         case "mac":
               $g_directories[] = 'platformMacCarb';
               break;
      }
      
      $g_directories[] = 'persistence';
      $g_directories[] = 'sim';
      $g_directories[] = 'util';
      $g_directories[] = 'util/messaging';
      $g_directories[] = 'unit/tests';
      $g_directories[] = 'unit';
      $g_directories[] = 'ts';
   }

   if(! $isGame)
   {
      // Only add these dirs if we're building the game.
      $g_directories[] = 'TGB';
      if( $platform == "windows" )
         $g_directories[] = 'platformWin32/registry';
   }
   
   // And the real T2D code.
   $g_directories[] = 'T2D';
   $g_directories[] = 'T2D/activeTiles';
   $g_directories[] = 'T2D/aStar';

   // Alpha-sort it, for sanity.
   sort($g_directories);
   
   return $g_directories;
}

function generateConfigOutputs($name)
{
   return array(
      'VS7.1' => array(
         // Set the output directory for this project file. (Relative to projectGenerator's PWD)
         'outputDir' => '../../engine/compilers/VisualStudio.net',

         // Set the base directory for this project's code. (Relative to project output directory.)
         'baseDir' => '../../source/',

         // What project template are we using?
         'template' => 'vc2k3_proj.tpl',

         // Filename to write the project to...
         'outputFile' => $name . '.vcproj',

         // What extensions are we scanning for?
         'fileExtensions' => array('cc', 'h', 'cpp', 'asm'),
         
         // Rejection patterns.
         'rejectPatterns' => array("*\.mac\.*", "*\.unix\.*"),
      ),
      'VS8' => array(
         // Set the output directory for this project file. (Relative to projectGenerator's PWD)
         'outputDir' => '../../engine/compilers/VisualStudio 2005',

         // Set the base directory for this project's code. (Relative to project output directory.)
         'baseDir' => '../../source/',

         // What project template are we using?
         'template' => 'vc2k5_proj.tpl',

         // Filename to write the project to...
         'outputFile' => $name . '.vcproj',

         // What extensions are we scanning for?
         'fileExtensions' => array('cc', 'h', 'cpp', 'asm'),
         
         // Rejection patterns.
         'rejectPatterns' => array("*\.mac\.*", "*\.unix\.*"),
      ),
      'build' => array(
         // Set the output directory for this project file. (Relative to projectGenerator's PWD)
         'outputDir' => './manifest',

         // Set the base directory for this project's code. (Relative to project output directory.)
         'baseDir' => '../../../engine/source/',

         // What project template are we using?
         'template' => 'buildManifest.tpl',

         // Filename to write the project to...
         'outputFile' => 'buildManifest_' . $name . '.txt',

         // What extensions are we scanning for?
         'fileExtensions' => array('cc', 'h', 'cpp', 'asm'),
         
         // Rejection patterns.
         'rejectPatterns' => array(),
      ),
   );
}

// Information for the T2D project.
$g_config_projects['TorqueGameBuilder'] = array(
      // What directories are we checking in?
      'paths' => generateConfigDirectories(false, "windows"),
      
      // List of outputs we want to generate.
      'outputs' => generateConfigOutputs("TorqueGameBuilder"),
      
      'gameDir' => "games",
      
      'defines' => array(),
   );
   
// Information for the T2D Game project.
$g_config_projects['TGBGame'] = array(
      // What directories are we checking in?
      'paths' => generateConfigDirectories(true, "windows"),
      
      // List of outputs we want to generate.
      'outputs' => generateConfigOutputs("TGBGame"),
      
      'gameDir' => "games",
      
      'defines' => array('TORQUE_PLAYER'),
      
      // Trailing slash here is important
      'additionalExePath' => "gameData/T2DProject/",
   );

?>
